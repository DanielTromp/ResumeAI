-- Activate the pgvector extension if it is not already activated
CREATE EXTENSION IF NOT EXISTS vector;

-- Drop the existing table if it exists
DROP TABLE IF EXISTS public."01_OAS";

-- Create the table "01_OAS" with the required columns
CREATE TABLE public."01_OAS" (
    id serial PRIMARY KEY,
    name text,
    cv_chunk text,
    embedding vector(1536)
);

-- Drop any existing overloads of the function match_01_oas
DROP FUNCTION IF EXISTS public.match_01_oas(integer, double precision, vector);
DROP FUNCTION IF EXISTS public.match_01_oas(vector, double precision, integer);

-- Create the function match_01_oas with parameters in the desired order:
-- query_embedding (vector), match_threshold (double precision), match_count (integer)
CREATE OR REPLACE FUNCTION public.match_01_oas(
    query_embedding vector,
    match_threshold double precision,
    match_count integer
)
RETURNS TABLE (
    name text,
    cv_chunk text,
    similarity float
)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
    SELECT
       "01_OAS".name,
       "01_OAS".cv_chunk,
       1 - ("01_OAS".embedding <=> query_embedding) AS similarity
    FROM "01_OAS"
    WHERE 1 - ("01_OAS".embedding <=> query_embedding) > match_threshold
    ORDER BY similarity DESC
    LIMIT match_count;
END;
$$;